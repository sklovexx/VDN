{"version":3,"sources":["ShaderTime.ts"],"names":[],"mappings":";;;;;AACM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IAAwC,8BAAY;IADpD;QAAA,qEA6CC;QAxCG,UAAI,GAAW,KAAK,CAAC;QAwBb,YAAM,GAAG,CAAC,CAAC;;IAgBvB,CAAC;IAnCG,sBAAI,2BAAG;aAAP;YACI,OAAO,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;aACD,UAAQ,KAAK;YACT,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;YAED,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,MAAM,EAAE;gBACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACjE,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;oBACxC,IAAI,QAAQ,GAAQ,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBAC9C,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC9C;aACJ;QACL,CAAC;;;OAfA;IAmBS,2BAAM,GAAhB,UAAiB,EAAE;QACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;YAC9E,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SAC3B;IACL,CAAC;IACO,mCAAc,GAAtB,UAAuB,EAAE;QACrB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG;YAAE,KAAK,GAAG,CAAC,CAAC;QAChC,KAAK,IAAI,IAAI,CAAC;QACd,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEjD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAvCD;QADC,QAAQ;4CACY;IAKrB;QADC,QAAQ;yCAGR;IAXgB,UAAU;QAD9B,OAAO;OACa,UAAU,CA4C9B;IAAD,iBAAC;CA5CD,AA4CC,CA5CuC,EAAE,CAAC,SAAS,GA4CnD;kBA5CoB,UAAU","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\components","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ShaderTime extends cc.Component {\n    _material: any;\n    \n    @property\n    _max: number = 65535;\n\n    isUpdate: boolean;\n\n    @property\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = value;\n        if (!CC_EDITOR) {\n            return;\n        }\n        \n        let sprite = this.node.getComponent(cc.Sprite);\n        if (sprite) {\n            this._material = this.getComponent(cc.Sprite).sharedMaterials[0];\n            if (this._material.effect._properties.time) {\n                let material: any = sprite.sharedMaterials[0];\n                material.effect.setProperty('time', value);\n            }\n        }\n    }\n    \n    private _start = 0;\n\n    protected update(dt) {\n        this._material = this.node.getComponent(cc.Sprite).sharedMaterials[0];\n        if (this.node.active && this._material && this._material.effect._properties.time) {\n            this._setShaderTime(dt);\n        }\n    }\n    private _setShaderTime(dt) {\n        let start = this._start;\n        if (start > this.max) start = 0;\n        start += 0.02;\n        this._material.effect.setProperty('time', start);\n\n        this._start = start;\n    }\n}\n"]}