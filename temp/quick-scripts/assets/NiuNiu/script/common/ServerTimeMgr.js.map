{"version":3,"sources":["ServerTimeMgr.js"],"names":["ALLOWED_TIMESTAMP_OFFSET","ServerTimeMgr","cc","Class","properties","delayForOfflineReward","_timeStampOffset","Number","MAX_VALUE","timeStampOffset","get","set","value","log","isDeviceTimeValid","GlobalNiuNiu","config","DEBUG_MODE","gameMgr","checkForSubsReward","selOfflineRewardForAdVideo","viewMgr","showDailyRewardView","ctor","statics","instance","getInstance","loadServerTime","sys","platform","ANDROID","UtilsCross","require","xhr","loader","getXMLHttpRequest","onStreamXHREvents","open","timeout","send","method","responseHandler","forEach","eventname","onreadystatechange","readyState","status","serverTimeStamp","JSON","parse","responseText","nowTimeStamp","Date","getTime","Math","abs","e","error","message","dataMgr","playerObj","isControlTime","setServerTimeStamp","timeStamp","window","module","exports"],"mappings":"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","file":"ServerTimeMgr.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\common","sourcesContent":["/**\r\n * Created by edisonjiang on 2018/4/23.\r\n */\r\n\r\n\"use strict\";\r\n\r\n// 可容忍的服务器时间戳和设备本地时间戳的偏差值(单位秒)\r\nconst ALLOWED_TIMESTAMP_OFFSET = 600;\r\n\r\nlet ServerTimeMgr = cc.Class({\r\n    properties: {\r\n        delayForOfflineReward: 0,\r\n\r\n        _timeStampOffset: Number.MAX_VALUE, // 服务器时间戳和设备本地时间戳的偏移量(单位秒)\r\n        timeStampOffset: {\r\n            get () {\r\n                return this._timeStampOffset;\r\n            },\r\n            set (value) {\r\n                this._timeStampOffset = value;\r\n                cc.log(\"this._timeStampOffset = \" + this._timeStampOffset);\r\n\r\n                // // 增加用于给予用户奖励的离线时间\r\n                // GlobalNiuNiu.gameMgr.addOfflineTimeForReward();\r\n                if (this.isDeviceTimeValid() || GlobalNiuNiu.config.DEBUG_MODE) {\r\n                    // 检查订阅的每日奖励\r\n                    GlobalNiuNiu.gameMgr.checkForSubsReward();\r\n                    // 检测是否给予离线奖励\r\n                    GlobalNiuNiu.gameMgr.selOfflineRewardForAdVideo(false, this.delayForOfflineReward);\r\n                    // 显示每日奖励\r\n                    GlobalNiuNiu.viewMgr.showDailyRewardView();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    ctor(){\r\n    },\r\n\r\n    statics: {\r\n        instance: null,\r\n        getInstance: function () {\r\n            if (ServerTimeMgr.instance == null) {\r\n                ServerTimeMgr.instance = new ServerTimeMgr();\r\n            }\r\n            return ServerTimeMgr.instance;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 读取服务器时间\r\n     */\r\n    loadServerTime () {\r\n        if (cc.sys.platform == cc.sys.ANDROID){\r\n            let UtilsCross = require('UtilsCross');\r\n            UtilsCross.loadServerTime();\r\n\r\n            return;\r\n        }\r\n\r\n        var xhr = cc.loader.getXMLHttpRequest();\r\n        this.onStreamXHREvents(xhr, 'GET');\r\n\r\n        xhr.open(\"GET\", \"https://sec.tclclouds.com/game180412/stamp/q\", true);\r\n        // note: In Internet Explorer, the timeout property may be set only after calling the open()\r\n        // method and before calling the send() method.\r\n        xhr.timeout = 10000; // 10 seconds for timeout\r\n        xhr.send();\r\n    },\r\n\r\n    onStreamXHREvents (xhr, method, responseHandler ) {\r\n        // var handler = responseHandler || function (response) {\r\n        //     return method + \" Response (30 chars): \" + response.substring(0, 30) + \"...\";\r\n        // };\r\n\r\n        // Simple events\r\n        ['loadstart', 'abort', 'error', 'load', 'loadend', 'timeout'].forEach((eventname) => {\r\n            xhr[\"on\" + eventname] = () => {\r\n                if (eventname === 'timeout') {\r\n                    cc.log('(timeout)');\r\n\r\n                    this.timeStampOffset = Number.MAX_VALUE;\r\n                }\r\n            };\r\n        });\r\n\r\n        // Special event\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState === 4 && (xhr.status >= 200 && xhr.status < 300)) {\r\n                // cc.log(handler(xhr.responseText));\r\n\r\n                try {\r\n                    let serverTimeStamp = JSON.parse(xhr.responseText)['Stamp'];\r\n                    let nowTimeStamp = new Date().getTime() / 1000;\r\n                    this.timeStampOffset = Math.abs(nowTimeStamp - serverTimeStamp);\r\n                    cc.log(\"load time Succ nowTimeStamp= \" + nowTimeStamp);\r\n                }\r\n                catch (e) {\r\n                    cc.log(\"load time Failed  \");\r\n                    cc.error(\"on loadServerTime: \" + e.message);\r\n                    this.timeStampOffset = Number.MAX_VALUE;\r\n                }\r\n            }else{\r\n                cc.log(\"load time xhr.readyState = \" + xhr.readyState + \" xhr.status = \" + xhr.status);\r\n            }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * 获得设备时间是否合法\r\n     * @returns {boolean}\r\n     */\r\n    isDeviceTimeValid () {\r\n        if (GlobalNiuNiu.dataMgr.playerObj.isControlTime) {\r\n            return (this.timeStampOffset < ALLOWED_TIMESTAMP_OFFSET);\r\n        } else {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 设置服务器返回的时间戳\r\n     * @param {Number} timeStamp\r\n     */\r\n    setServerTimeStamp (timeStamp) {\r\n        let nowTimeStamp = new Date().getTime() / 1000;\r\n        this.timeStampOffset = Math.abs(nowTimeStamp - timeStamp);\r\n    }\r\n});\r\n\r\nwindow.ServerTimeMgr = ServerTimeMgr;\r\n\r\nmodule.exports = ServerTimeMgr;\r\n"]}