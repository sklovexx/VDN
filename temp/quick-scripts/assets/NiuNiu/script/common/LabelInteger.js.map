{"version":3,"sources":["LabelInteger.js"],"names":["UtilsOther","require","LabelFormType","cc","Enum","None","ThousandSeparator","FormatTime","formatTime","s","t","hour","Math","floor","min","sec","day","parseInt","slice","Class","extends","Label","properties","formType","tooltip","type","default","notify","oldValue","setValue","string","animationDuration","_textKey","override","get","set","value","Number","_sgNode","toString","split","reverse","join","replace","setString","_updateNodeSize","_curValue","_toValue","_delta","animate","isNaN","assert","setFormString","update","dt","step","max","onLoad"],"mappings":";;;;AAAA;;;;;AAKA;;AAEA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;;AAEA,IAAIC,gBAAgBC,GAAGC,IAAH,CAAQ;AACxBC,UAAM,CADkB,EACf;AACTC,uBAAmB,CAFK,EAEF;AACtBC,gBAAY,CAHY,CAGV;AAHU,CAAR,CAApB;;AAMA;;;;;AAKA,IAAIC,aAAa,SAAbA,UAAa,CAAUC,CAAV,EAAa;AAC1B,QAAIC,UAAJ;AACA,QAAID,KAAK,CAAT,EAAY;AACR,YAAIE,OAAOC,KAAKC,KAAL,CAAWJ,IAAI,IAAf,CAAX;AACA,YAAIK,MAAMF,KAAKC,KAAL,CAAWJ,IAAI,EAAf,IAAqB,EAA/B;AACA,YAAIM,MAAMN,IAAI,EAAd;AACA,YAAIO,MAAMC,SAASN,OAAO,EAAhB,CAAV;AACA,YAAIK,OAAO,CAAX,EAAc;AACV,mBAAOA,MAAM,MAAb;AACH;AACD,YAAIA,MAAM,CAAV,EAAa;AACT,mBAAOA,MAAM,OAAb;AACH;;AAED,YAAIA,MAAM,CAAV,EAAa;AACTL,mBAAOA,OAAO,KAAKK,GAAnB;AACAN,gBAAIM,MAAM,MAAN,GAAe,CAAC,OAAOL,IAAR,EAAcO,KAAd,CAAoB,CAAC,CAArB,CAAf,GAAyC,GAA7C;AACH,SAHD,MAIK,IAAIP,OAAO,CAAX,EAAc;AACfD,gBAAI,CAAC,OAAOC,IAAR,EAAcO,KAAd,CAAoB,CAAC,CAArB,IAA0B,GAA9B;AACH,SAFI,MAEE;AACHR,gBAAI,EAAJ;AACH;;AAED,YAAII,MAAM,EAAV,EAAc;AACVJ,iBAAK,GAAL;AACH;AACDA,aAAKI,MAAM,GAAX;AACA,YAAIC,MAAM,EAAV,EAAc;AACVL,iBAAK,GAAL;AACH;AACDA,aAAKO,SAASF,GAAT,CAAL;AACH;AACD,WAAOL,CAAP;AACH,CAlCD;;AAoCAP,GAAGgB,KAAH,CAAS;AACLC,aAASjB,GAAGkB,KADP;;AAGLC,gBAAY;AACRC,kBAAU;AACNC,qBAAS,2DADH;AAENC,kBAAMvB,aAFA;AAGNwB,qBAASxB,cAAcG,IAHjB;AAINsB,oBAAQ,gBAASC,QAAT,EAAkB;AACtB,qBAAKC,QAAL,CAAc,KAAKC,MAAnB;AACH;AANK,SADF;;AAURC,2BAAmB;AACfP,qBAAS,MADM;AAEfE,qBAAS;AAFM,SAVX;;AAeR;;;AAGAM,kBAAU,CAlBF;;AAoBRF,gBAAQ;AACJG,sBAAU,IADN;AAEJT,qBAAS,OAFL;AAGJU,iBAAK,eAAY;AACb,uBAAO,KAAKF,QAAZ;AACH,aALG;AAMJG,iBAAK,aAAUC,KAAV,EAAiB;AAClB;AACA,qBAAKJ,QAAL,GAAgBK,OAAOD,KAAP,CAAhB;AACA,oBAAI,KAAKE,OAAT,EAAkB;AACd,4BAAO,KAAKf,QAAZ;AACI,6BAAKrB,cAAcI,iBAAnB;AACA;AACI8B,wCAAQA,MAAMG,QAAN,GAAiBC,KAAjB,CAAuB,EAAvB,EAA2BC,OAA3B,GAAqCC,IAArC,CAA0C,EAA1C,EAA8CC,OAA9C,CAAsD,2BAAtD,EAAmF,KAAnF,EAA0FH,KAA1F,CAAgG,EAAhG,EAAoGC,OAApG,GAA8GC,IAA9G,CAAmH,EAAnH,CAAR;AACH;AACG;AACJ,6BAAKxC,cAAcK,UAAnB;AACA;AACI6B,wCAAQ5B,WAAW4B,KAAX,CAAR;AACH;AACG;AAVR;AAYA,yBAAKE,OAAL,CAAaM,SAAb,CAAuBR,KAAvB;AACA,yBAAKS,eAAL;AACH;AACJ;AAzBG,SApBA;;AAgDRC,mBAAW,CAhDH;AAiDRC,kBAAU,CAjDF;AAkDRC,gBAAQ;AAlDA,KAHP;;AAwDL;;;;;AAKAnB,cAAU,kBAAUO,KAAV,EAAiBa,OAAjB,EAA0B;AAChC,YAAIb,UAAU,EAAV,IAAgBA,UAAU,IAA1B,IAAkCc,MAAMd,KAAN,CAAtC,EAAmD;AAC/CjC,eAAGgD,MAAH,CAAU,KAAV,EAAiB,6CAAjB;AACH;;AAED,YAAGF,OAAH,EAAW;AACP,iBAAKF,QAAL,GAAgBX,KAAhB;AACH,SAFD,MAGI;AACA,iBAAKW,QAAL,GAAgBX,KAAhB;AACA,iBAAKU,SAAL,GAAiBV,KAAjB;AACA,iBAAKN,MAAL,GAAcM,KAAd;AACA;AACH;AACD,aAAKY,MAAL,GAAc,CAAd;AACH,KA5EI;;AA8ELI,mBAAe,uBAAShB,KAAT,EAAe;AAC1B,gBAAO,KAAKb,QAAZ;AACI,iBAAKrB,cAAcG,IAAnB;AACA;AACI,yBAAKyB,MAAL,GAAcM,KAAd;AACH;AACG;AACJ,iBAAKlC,cAAcI,iBAAnB;AACA;AACI,yBAAKwB,MAAL,GAAcM,MAAMI,KAAN,CAAY,EAAZ,EAAgBC,OAAhB,GAA0BC,IAA1B,CAA+B,EAA/B,EAAmCC,OAAnC,CAA2C,2BAA3C,EAAwE,KAAxE,EAA+EH,KAA/E,CAAqF,EAArF,EAAyFC,OAAzF,GAAmGC,IAAnG,CAAwG,EAAxG,CAAd;AACH;AACG;AACJ,iBAAKxC,cAAcK,UAAnB;AACA;AACI,yBAAKuB,MAAL,GAActB,WAAW4B,KAAX,CAAd;AACH;AACG;AAfR;AAiBH,KAhGI;;AAkGLiB,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAG,KAAKP,QAAL,IAAiB,KAAKD,SAAzB,EAAmC;AAC/B,gBAAG,KAAKE,MAAL,IAAe,CAAlB,EAAoB;AAChB,qBAAKA,MAAL,GAAc,KAAKD,QAAL,GAAgB,KAAKD,SAAnC;AACH;AACD,gBAAIS,OAAOD,KAAK,KAAKvB,iBAAV,GAA8B,KAAKiB,MAA9C;AACA,gBAAG,KAAKA,MAAL,GAAc,CAAjB,EAAmB;AACfO,uBAAOtC,SAASsC,IAAT,CAAP;AACA,oBAAGA,QAAQ,CAAX,EAAa;AACTA,2BAAO,CAAP;AACH;AACD,qBAAKT,SAAL,IAAkBS,IAAlB;AACA,qBAAKT,SAAL,GAAiBlC,KAAKE,GAAL,CAAS,KAAKgC,SAAd,EAAyB,KAAKC,QAA9B,CAAjB;AACH,aAPD,MAQI;AACAQ,uBAAO,CAACA,IAAR;AACAA,uBAAOtC,SAASsC,IAAT,CAAP;AACA,oBAAGA,QAAQ,CAAX,EAAa;AACTA,2BAAO,CAAP;AACH;AACD,qBAAKT,SAAL,IAAkBS,IAAlB;AACA,qBAAKT,SAAL,GAAiBlC,KAAK4C,GAAL,CAAS,KAAKV,SAAd,EAAyB,KAAKC,QAA9B,CAAjB;AACH;AACD,iBAAKjB,MAAL,GAAc,KAAKgB,SAAnB;AACA;;AAEA,gBAAG,KAAKC,QAAL,IAAiB,KAAKD,SAAzB,EAAmC;AAC/B,qBAAKE,MAAL,GAAc,CAAd;AACH;AACJ;AACJ,KAhII;;AAkILS,YAAQ,kBAAU;AACd;AACA,aAAK5B,QAAL,CAAc,KAAKC,MAAnB;AACH;AArII,CAAT","file":"LabelInteger.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\common","sourcesContent":["/**\n * Created by skyxu on 2018/3/13.\n * 专门用来显示数字的Label，实现滚动效果\n */\n\n\"use strict\";\n\nlet UtilsOther = require('UtilsOther');\n\nlet LabelFormType = cc.Enum({\n    None: 0, // 不做格式化\n    ThousandSeparator: 1, // 3位分隔\n    FormatTime: 2 // 格式化时间\n});\n\n/**\n *\n * @param s {Number} 秒\n * @return {string}\n */\nlet formatTime = function (s) {\n    let t;\n    if (s >= 0) {\n        let hour = Math.floor(s / 3600);\n        let min = Math.floor(s / 60) % 60;\n        let sec = s % 60;\n        let day = parseInt(hour / 24);\n        if (day == 1) {\n            return day + \" day\";\n        }\n        if (day > 1) {\n            return day + \" days\";\n        }\n\n        if (day > 0) {\n            hour = hour - 24 * day;\n            t = day + \"day \" + ('00' + hour).slice(-2) + \":\";\n        }\n        else if (hour > 0) {\n            t = ('00' + hour).slice(-2) + \":\";\n        } else {\n            t = \"\";\n        }\n\n        if (min < 10) {\n            t += \"0\";\n        }\n        t += min + \":\";\n        if (sec < 10) {\n            t += \"0\";\n        }\n        t += parseInt(sec);\n    }\n    return t;\n};\n\ncc.Class({\n    extends: cc.Label,\n\n    properties: {\n        formType: {\n            tooltip: 'None: 不做格式化\\nThousandSeparator: 3位逗号分隔\\nFormatTime: 格式化时间',\n            type: LabelFormType,\n            default: LabelFormType.None,\n            notify: function(oldValue){\n                this.setValue(this.string);\n            }\n        },\n\n        animationDuration: {\n            tooltip: '动画时间',\n            default: 0.5\n        },\n\n        /**\n         * label的实际数值\n         */\n        _textKey: 0,\n\n        string: {\n            override: true,\n            tooltip: '必须是数字',\n            get: function () {\n                return this._textKey;\n            },\n            set: function (value) {\n                // 编辑器输入默认是字符串，这里必须转成数字方便计算\n                this._textKey = Number(value);\n                if (this._sgNode) {\n                    switch(this.formType){\n                        case LabelFormType.ThousandSeparator:\n                        {\n                            value = value.toString().split('').reverse().join('').replace(/(\\d{3}(?=\\d)(?!\\d+\\.|$))/g, '$1,').split('').reverse().join('');\n                        }\n                            break;\n                        case LabelFormType.FormatTime:\n                        {\n                            value = formatTime(value);\n                        }\n                            break;\n                    }\n                    this._sgNode.setString(value);\n                    this._updateNodeSize();\n                }\n            }\n        },\n\n        _curValue: 0,\n        _toValue: 0,\n        _delta: 0\n    },\n\n    /**\n     * 设置数值\n     * @param {int} value\n     * @param {boolean} animate 是否动画\n     */\n    setValue: function (value, animate) {\n        if (value === \"\" || value === null || isNaN(value)){\n            cc.assert(false, \"The value of LabelInteger must be a Number!\");\n        }\n\n        if(animate){\n            this._toValue = value;\n        }\n        else{\n            this._toValue = value;\n            this._curValue = value;\n            this.string = value;\n            //this.setFormString(value.toString());\n        }\n        this._delta = 0;\n    },\n\n    setFormString: function(value){\n        switch(this.formType){\n            case LabelFormType.None:\n            {\n                this.string = value;\n            }\n                break;\n            case LabelFormType.ThousandSeparator:\n            {\n                this.string = value.split('').reverse().join('').replace(/(\\d{3}(?=\\d)(?!\\d+\\.|$))/g, '$1,').split('').reverse().join('');\n            }\n                break;\n            case LabelFormType.FormatTime:\n            {\n                this.string = formatTime(value);\n            }\n                break;\n        }\n    },\n\n    update: function (dt) {\n        if(this._toValue != this._curValue){\n            if(this._delta == 0){\n                this._delta = this._toValue - this._curValue;\n            }\n            let step = dt / this.animationDuration * this._delta;\n            if(this._delta > 0){\n                step = parseInt(step);\n                if(step == 0){\n                    step = 1;\n                }\n                this._curValue += step;\n                this._curValue = Math.min(this._curValue, this._toValue);\n            }\n            else{\n                step = -step;\n                step = parseInt(step);\n                if(step == 0){\n                    step = 1;\n                }\n                this._curValue -= step;\n                this._curValue = Math.max(this._curValue, this._toValue);\n            }\n            this.string = this._curValue;\n            //this.setFormString(this._curValue.toString());\n\n            if(this._toValue == this._curValue){\n                this._delta = 0;\n            }\n        }\n    },\n\n    onLoad: function(){\n        // 为了初始就显示正确的格式\n        this.setValue(this.string);\n    }\n});\n"]}