{"version":3,"sources":["Algo.js"],"names":["Algo","cipher","input","w","Nb","Nr","length","state","i","Math","floor","addRoundKey","round","subBytes","shiftRows","mixColumns","output","Array","keyExpansion","key","Nk","temp","r","t","subWord","rotWord","rCon","s","c","sBox","a","b","rnd","tmp","module","exports","define","amd"],"mappings":"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","file":"Algo.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\encrypt","sourcesContent":["\r\n/* jshint node:true *//* GlobalNiuNiu define */\r\n\r\n/**\r\n * Rijndael cipher encryption routines,\r\n *\r\n * Reference implementation of FIPS-197 http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf.\r\n *\r\n * @namespace\r\n */\r\n\r\n\"use strict\";\r\n\r\nlet Algo = {};\r\n\r\n/**\r\n *  Cipher function: encrypt 'input' state with Rijndael algorithm [ยง5.1];\r\n *   applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.\r\n *\r\n * @param   {number[]}   input - 16-byte (128-bit) input state array.\r\n * @param   {number[][]} w - Key schedule as 2D byte-array (Nr+1 x Nb bytes).\r\n * @returns {number[]}   Encrypted output state array.\r\n */\r\nAlgo.cipher = function(input, w) {\r\n    let Nb = 4;               // block size (in words): no of columns in state\r\n    let Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n    let state = [[],[],[],[]];  // initialise 4xNb byte-array 'state' with input [ยง3.4]\r\n    for (let i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i];\r\n\r\n    state = Algo.addRoundKey(state, w, 0, Nb);\r\n\r\n    for (let round=1; round<Nr; round++) {\r\n        state = Algo.subBytes(state, Nb);\r\n        state = Algo.shiftRows(state, Nb);\r\n        state = Algo.mixColumns(state, Nb);\r\n        state = Algo.addRoundKey(state, w, round, Nb);\r\n    }\r\n\r\n    state = Algo.subBytes(state, Nb);\r\n    state = Algo.shiftRows(state, Nb);\r\n    state = Algo.addRoundKey(state, w, Nr, Nb);\r\n\r\n    let output = new Array(4*Nb);  // convert state to 1-d array before returning [ยง3.4]\r\n    for (let i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)];\r\n\r\n    return output;\r\n};\r\n\r\n\r\n/**\r\n * Perform key expansion to generate a key schedule from a cipher key [ยง5.2].\r\n *\r\n * @param   {number[]}   key - Cipher key as 16/24/32-byte array.\r\n * @returns {number[][]} Expanded key schedule as 2D byte-array (Nr+1 x Nb bytes).\r\n */\r\nAlgo.keyExpansion = function(key) {\r\n    let Nb = 4;            // block size (in words): no of columns in state\r\n    let Nk = key.length/4; // key length (in words): 4/6/8 for 128/192/256-bit keys\r\n    let Nr = Nk + 6;       // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n    let w = new Array(Nb*(Nr+1));\r\n    let temp = new Array(4);\r\n\r\n    // initialise first Nk words of expanded key with cipher key\r\n    for (let i=0; i<Nk; i++) {\r\n        let r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]];\r\n        w[i] = r;\r\n    }\r\n\r\n    // expand the key into the remainder of the schedule\r\n    for (let i=Nk; i<(Nb*(Nr+1)); i++) {\r\n        w[i] = new Array(4);\r\n        for (let t=0; t<4; t++) temp[t] = w[i-1][t];\r\n        // each Nk'th word has extra transformation\r\n        if (i % Nk == 0) {\r\n            temp = Algo.subWord(Algo.rotWord(temp));\r\n            for (let t=0; t<4; t++) temp[t] ^= Algo.rCon[i/Nk][t];\r\n        }\r\n        // 256-bit key has subWord applied every 4th word\r\n        else if (Nk > 6 && i%Nk == 4) {\r\n            temp = Algo.subWord(temp);\r\n        }\r\n        // xor w[i] with w[i-1] and w[i-Nk]\r\n        for (let t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\r\n    }\r\n\r\n    return w;\r\n};\r\n\r\n\r\n/**\r\n * Apply SBox to state S [ยง5.1.1]\r\n * @private\r\n */\r\nAlgo.subBytes = function(s, Nb) {\r\n    for (let r=0; r<4; r++) {\r\n        for (let c=0; c<Nb; c++) s[r][c] = Algo.sBox[s[r][c]];\r\n    }\r\n    return s;\r\n};\r\n\r\n\r\n/**\r\n * Shift row r of state S left by r bytes [ยง5.1.2]\r\n * @private\r\n */\r\nAlgo.shiftRows = function(s, Nb) {\r\n    let t = new Array(4);\r\n    for (let r=1; r<4; r++) {\r\n        for (let c=0; c<4; c++) t[c] = s[r][(c+r)%Nb];  // shift into temp copy\r\n        for (let c=0; c<4; c++) s[r][c] = t[c];         // and copy back\r\n    }          // note that this will work for Nb=4,5,6, but not 7,8\r\n    return s;  // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf\r\n};\r\n\r\n\r\n/**\r\n * Combine bytes of each col of state S [ยง5.1.3]\r\n * @private\r\n */\r\nAlgo.mixColumns = function(s, Nb) {\r\n    for (let c=0; c<4; c++) {\r\n        let a = new Array(4);  // 'a' is a copy of the current column from 's'\r\n        let b = new Array(4);  // 'b' is aโข{02} in GF(2^8)\r\n        for (let i=0; i<4; i++) {\r\n            a[i] = s[i][c];\r\n            b[i] = s[i][c]&0x80 ? s[i][c]<<1 ^ 0x011b : s[i][c]<<1;\r\n        }\r\n        // a[n] ^ b[n] is aโข{03} in GF(2^8)\r\n        s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // {02}โขa0 + {03}โขa1 + a2 + a3\r\n        s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 โข {02}โขa1 + {03}โขa2 + a3\r\n        s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + {02}โขa2 + {03}โขa3\r\n        s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // {03}โขa0 + a1 + a2 + {02}โขa3\r\n    }\r\n    return s;\r\n};\r\n\r\n\r\n/**\r\n * Xor Round Key into state S [ยง5.1.4]\r\n * @private\r\n */\r\nAlgo.addRoundKey = function(state, w, rnd, Nb) {\r\n    for (let r=0; r<4; r++) {\r\n        for (let c=0; c<Nb; c++) state[r][c] ^= w[rnd*4+c][r];\r\n    }\r\n    return state;\r\n};\r\n\r\n\r\n/**\r\n * Apply SBox to 4-byte word w\r\n * @private\r\n */\r\nAlgo.subWord = function(w) {\r\n    for (let i=0; i<4; i++) w[i] = Algo.sBox[w[i]];\r\n    return w;\r\n};\r\n\r\n\r\n/**\r\n * Rotate 4-byte word w left by one byte\r\n * @private\r\n */\r\nAlgo.rotWord = function(w) {\r\n    let tmp = w[0];\r\n    for (let i=0; i<3; i++) w[i] = w[i+1];\r\n    w[3] = tmp;\r\n    return w;\r\n};\r\n\r\n\r\n// sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [ยง5.1.1]\r\nAlgo.sBox =  [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\r\n    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\r\n    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\r\n    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\r\n    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\r\n    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\r\n    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\r\n    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\r\n    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\r\n    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\r\n    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\r\n    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\r\n    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\r\n    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\r\n    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\r\n    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16];\r\n\r\n\r\n// rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [ยง5.2]\r\nAlgo.rCon = [ [0x00, 0x00, 0x00, 0x00],\r\n    [0x01, 0x00, 0x00, 0x00],\r\n    [0x02, 0x00, 0x00, 0x00],\r\n    [0x04, 0x00, 0x00, 0x00],\r\n    [0x08, 0x00, 0x00, 0x00],\r\n    [0x10, 0x00, 0x00, 0x00],\r\n    [0x20, 0x00, 0x00, 0x00],\r\n    [0x40, 0x00, 0x00, 0x00],\r\n    [0x80, 0x00, 0x00, 0x00],\r\n    [0x1b, 0x00, 0x00, 0x00],\r\n    [0x36, 0x00, 0x00, 0x00] ];\r\n\r\n\r\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\nif (typeof module != 'undefined' && module.exports) module.exports = Algo; // CommonJs export\r\nif (typeof define == 'function' && define.amd) define([], function() { return Algo; }); // AMD"]}