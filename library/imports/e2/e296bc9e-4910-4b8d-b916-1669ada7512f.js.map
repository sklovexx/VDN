{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\common/assets\\NiuNiu\\script\\common\\ListView.js"],"names":["ListAdapter","cc","Class","ctor","dataSet","setItemComponent","itemComponent","getComponentType","setDataSet","data","getCount","length","getItem","posIndex","_getView","item","itemComp","getComponent","updateView","warn","ListView","extends","Component","properties","itemTemplate","type","Prefab","default","spacing","Float","spawnCount","Integer","scrollView","ScrollView","content","Node","visible","adapter","serializable","_items","NodePool","_filledIds","Object","horizontal","_itemHeight","_itemWidth","_itmesVisble","lastStartIndex","scrollTopNotifyed","scrollBottomNofityed","pullDownCallback","pullUpCallback","onLoad","vertical","anchorX","x","getParent","width","anchorY","y","height","console","error","itemOne","get","instantiate","put","_itemsVisible","Math","ceil","log","adjustEvent","setAdapter","poolHandlerComp","notifyUpdate","getItemIndex","floor","abs","getPositionInView","worldPos","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","updateIndex","forEach","hasOwnProperty","i","keys","key","scrollToTop","anim","scrollToBottom","scrollToLeft","scrollToRight","pullDown","callback","pullUp","update","dt","startIndex","checkNeedUpdate","_layoutVertical","child","addChild","setPosition","_layoutHorizontal","getRecycleItems","beginIndex","endIndex","children","recycles","push","itemStartIndex","itemEndIndex","totalCount","scrollBottomNotifyed","notifyScrollToBottom","recyles","updates","findUpdateIndex","index","scroll","notifyScrollToTop","d","on","isMobile","EventType","TOUCH_END","MOUSE_UP","TOUCH_CANCEL","MOUSE_LEAVE","sys","platform","WECHAT_GAME","QQ_PLAY","module","exports"],"mappings":"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","file":"ListView.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\common","sourcesContent":["/**\r\n * Created by skyxu on 2018/10/10.\r\n * 来源： http://forum.cocos.com/t/listview/67396\r\n * 由 typescript 改为 javascript 实现\r\n * ListView基于cc.ScrollView实现，避免重复造轮子写滚动逻辑\r\n * 使用方法：\r\n * 1：首先添加一个scrollView，然后把ListView组件添加上去\r\n * 2：定义数据集合，比如data = [1,2,3,4,5]\r\n * 3：实现Adapter（继承自ListAdapter)并重载updateView方法进行更新item\r\n * 4：创建一个adapter, 并给它设置数据源和item挂载的组件(setDataSet、setItemComponent),然后把adapter赋值给ListView即可\r\n */\r\n\r\n\"use strict\";\r\n\r\nlet ListAdapter = cc.Class({\r\n    ctor(){\r\n        this.dataSet = [];\r\n    },\r\n\r\n    // 指定ItemPrefab挂载的脚本\r\n    setItemComponent(itemComponent){\r\n        this.itemComponent = itemComponent;\r\n    },\r\n\r\n    getComponentType(){\r\n        return this.itemComponent;\r\n    },\r\n\r\n    setDataSet(data){\r\n        this.dataSet = data;\r\n    },\r\n\r\n    getCount(){\r\n        return this.dataSet.length;\r\n    },\r\n\r\n    getItem(posIndex){\r\n        return this.dataSet[posIndex];\r\n    },\r\n\r\n    _getView(item, posIndex) {\r\n        let itemComp = item.getComponent(this.itemComponent);\r\n        if (itemComp) {\r\n            this.updateView(itemComp, posIndex);\r\n        } else {\r\n            cc.warn(\"item 不包含组件:\", this.itemComponent);\r\n        }\r\n        return item;\r\n    },\r\n\r\n    /**\r\n     * 重载这个方法进行刷新item内容\r\n     * @param item {cc.Component}\r\n     * @param posIndex {cc.Integer}\r\n     */\r\n    updateView(item, posIndex){\r\n        // 这里更新item内容\r\n        // const data = this.getItem(posIndex);\r\n        // item.setInfo(data);\r\n    }\r\n});\r\n\r\n\r\nlet ListView = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        itemTemplate: {\r\n            type: cc.Prefab,\r\n            default: null\r\n        },\r\n\r\n        spacing: {\r\n            type: cc.Float,\r\n            default: 1\r\n        },\r\n\r\n        // 比可见元素多缓存3个, 缓存越多,快速滑动越流畅,但同时初始化越慢.\r\n        spawnCount: {\r\n            type: cc.Integer,\r\n            default: 3\r\n        },\r\n\r\n        /*\r\n         *  ListView组件需要借助ScrollView组件进行滚动显示.不需要自造轮子进行滚动逻辑.\r\n         *  同时ListView 需要将待显示的Item 制成预制体.以便动态生成列表项.\r\n         * */\r\n        scrollView: {\r\n            type: cc.ScrollView,\r\n            default: null\r\n        },\r\n\r\n        content: {\r\n            type: cc.Node,\r\n            default: null,\r\n            visible: false\r\n        },\r\n\r\n        adapter: {\r\n            type: ListAdapter,\r\n            default: null,\r\n            visible: false,\r\n            serializable: false\r\n        },\r\n\r\n        _items: {\r\n            type: cc.NodePool,\r\n            default: null,\r\n            visible: false\r\n        },\r\n\r\n        // 记录当前填充在树上的索引. 用来快速查找哪些位置缺少item了.\r\n        _filledIds: {\r\n            type: Object,\r\n            default: {},\r\n            visible: false\r\n        },\r\n\r\n        horizontal: {\r\n            default: false,\r\n            visible: false\r\n        },\r\n\r\n        // 初始时即计算item的高度.因为布局时要用到.\r\n        _itemHeight: 1,\r\n\r\n        _itemWidth: 1,\r\n\r\n        _itmesVisble: 1,\r\n\r\n        lastStartIndex: {\r\n            type: cc.Integer,\r\n            default: -1,\r\n            visible: false\r\n        },\r\n\r\n        // 是否触发上拉加载事件\r\n        scrollTopNotifyed: {\r\n            default: false,\r\n            visible: false\r\n        },\r\n\r\n        // 是否触发下拉刷新事件\r\n        scrollBottomNofityed: {\r\n            default: false,\r\n            visible: false\r\n        },\r\n\r\n        pullDownCallback: {\r\n            type: Object,\r\n            default: null,\r\n            visible: false\r\n        },\r\n\r\n        pullUpCallback: {\r\n            type: Object,\r\n            default: null,\r\n            visible: false\r\n        }\r\n\r\n    },\r\n\r\n    onLoad(){\r\n        if (this.scrollView) {\r\n            this.content = this.scrollView.content;\r\n            this.horizontal = this.scrollView.horizontal;\r\n            if (this.horizontal) {\r\n                this.scrollView.vertical = false;\r\n                this.content.anchorX = 0;\r\n                this.content.x = this.content.getParent().width * this.content.getParent().anchorX;\r\n            } else {\r\n                this.scrollView.vertical = true;\r\n                this.content.anchorY = 1;\r\n                this.content.y = this.content.getParent().height * this.content.getParent().anchorY;\r\n            }\r\n        } else {\r\n            console.error(\"ListView need a scrollView for showing.\")\r\n        }\r\n\r\n        this._items = this._items || new cc.NodePool();\r\n        let itemOne = this._items.get() || cc.instantiate(this.itemTemplate);\r\n        this._items.put(itemOne);\r\n        this._itemHeight = itemOne.height || 10;\r\n        this._itemWidth = itemOne.width || 10;\r\n\r\n        if (this.horizontal) {\r\n            this._itemsVisible = Math.ceil(this.content.getParent().width / this._itemWidth);\r\n        } else {\r\n            this._itemsVisible = Math.ceil(this.content.getParent().height / this._itemHeight);\r\n        }\r\n        console.log(\"可见区域的item数量为:\", this._itemsVisible);\r\n        this.adjustEvent();\r\n    },\r\n\r\n    setAdapter(adapter) {\r\n        this.adapter = adapter;\r\n        if (this.adapter == null) {\r\n            cc.warn(\"adapter 为空.\");\r\n            return\r\n        }\r\n        if (this.itemTemplate == null) {\r\n            cc.error(\"Listview 未设置待显示的Item模板.\");\r\n            return;\r\n        }\r\n        this._items.poolHandlerComp = this.adapter.getComponentType();\r\n\r\n        this.notifyUpdate();\r\n    },\r\n\r\n    getItemIndex(height) {\r\n        return Math.floor(Math.abs(height / ((this._itemHeight + this.spacing))));\r\n    },\r\n\r\n    getPositionInView(item) {\r\n        let worldPos = item.getParent().convertToWorldSpaceAR(item.position);\r\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\r\n        return viewPos;\r\n    },\r\n\r\n    // 数据变更了需要进行更新UI显示, 可只更新某一条.\r\n    notifyUpdate(updateIndex) {\r\n        if (this.adapter == null) {\r\n            return;\r\n        }\r\n        if (updateIndex && updateIndex.length > 0) {\r\n            updateIndex.forEach(i => {\r\n                if (this._filledIds.hasOwnProperty(i)) {\r\n                    delete this._filledIds[i];\r\n                }\r\n            })\r\n        } else {\r\n            Object.keys(this._filledIds).forEach(key => {\r\n                delete this._filledIds[key];\r\n            })\r\n        }\r\n        this.lastStartIndex = -1;\r\n        if (this.horizontal) {\r\n            this.content.width = this.adapter.getCount() * (this._itemWidth + this.spacing) + this.spacing;\r\n        } else {\r\n            this.content.height = this.adapter.getCount() * (this._itemHeight + this.spacing) + this.spacing; // get total content height\r\n        }\r\n        this.scrollView.scrollToTop()\r\n    },\r\n\r\n    scrollToTop(anim) {\r\n        this.scrollView.scrollToTop(anim ? 1 : 0);\r\n    },\r\n\r\n    scrollToBottom(anim) {\r\n        this.scrollView.scrollToBottom(anim ? 1 : 0);\r\n    },\r\n\r\n    scrollToLeft(anim) {\r\n        this.scrollView.scrollToLeft(anim ? 1 : 0);\r\n    },\r\n\r\n    scrollToRight(anim) {\r\n        this.scrollView.scrollToRight(anim ? 1 : 0);\r\n    },\r\n\r\n    // 下拉事件.\r\n    pullDown(callback) {\r\n        this.pullDownCallback = callback;\r\n    },\r\n\r\n    // 上拉事件.\r\n    pullUp(callback) {\r\n        this.pullUpCallback = callback;\r\n    },\r\n\r\n    update(dt) {\r\n        const startIndex = this.checkNeedUpdate();\r\n        if (startIndex >= 0) {\r\n            this.updateView(startIndex);\r\n        }\r\n    },\r\n\r\n    // 向某位置添加一个item.\r\n    _layoutVertical(child, posIndex) {\r\n        this.content.addChild(child);\r\n        // 增加一个tag 属性用来存储child的位置索引.\r\n        child[\"_tag\"] = posIndex;\r\n        this._filledIds[posIndex] = posIndex;\r\n        child.setPosition(0, -child.height * (0.5 + posIndex) - this.spacing * (posIndex + 1));\r\n    },\r\n\r\n    // 向某位置添加一个item.\r\n    _layoutHorizontal(child, posIndex) {\r\n        this.content.addChild(child);\r\n        // 增加一个tag 属性用来存储child的位置索引.\r\n        child[\"_tag\"] = posIndex;\r\n        this._filledIds[posIndex] = posIndex;\r\n        child.setPosition(-child.width * (0.5 + posIndex) - this.spacing * (posIndex + 1), 0);\r\n    },\r\n\r\n    // 获取可回收item\r\n    getRecycleItems(beginIndex, endIndex) {\r\n        const children = this.content.children;\r\n        const recycles = []\r\n        children.forEach(item => {\r\n            if (item[\"_tag\"] < beginIndex || item[\"_tag\"] > endIndex) {\r\n                recycles.push(item);\r\n                delete this._filledIds[item[\"_tag\"]];\r\n            }\r\n        });\r\n        return recycles;\r\n    },\r\n\r\n    // 填充View.\r\n    updateView(startIndex) {\r\n        let itemStartIndex = startIndex;\r\n        // 比实际元素多3个.\r\n        let itemEndIndex = itemStartIndex + this._itemsVisible + (this.spawnCount || 2);\r\n        const totalCount = this.adapter.getCount();\r\n        if (itemStartIndex >= totalCount) {\r\n            return;\r\n        }\r\n\r\n        if (itemEndIndex > totalCount) {\r\n            itemEndIndex = totalCount;\r\n            if (!this.scrollBottomNotifyed) {\r\n                this.notifyScrollToBottom()\r\n                this.scrollBottomNotifyed = true;\r\n            }\r\n        } else {\r\n            this.scrollBottomNotifyed = false;\r\n        }\r\n\r\n        // 回收需要回收的元素位置.向上少收一个.向下少收2两.\r\n        const recyles = this.getRecycleItems(itemStartIndex - (this.spawnCount || 2), itemEndIndex);\r\n        recyles.forEach(item => {\r\n            this._items.put(item);\r\n        });\r\n\r\n        // 查找需要更新的元素位置.\r\n        const updates = this.findUpdateIndex(itemStartIndex, itemEndIndex)\r\n\r\n        // 更新相应位置.\r\n        for (let index of updates) {\r\n            let child = this.adapter._getView(this._items.get() || cc.instantiate(this.itemTemplate), index);\r\n            this.horizontal ?\r\n                this._layoutHorizontal(child, index) :\r\n                this._layoutVertical(child, index);\r\n        }\r\n    },\r\n\r\n    // 检测是否需要更新UI.\r\n    checkNeedUpdate() {\r\n        if (this.adapter == null) {\r\n            return -1\r\n        }\r\n\r\n        let scroll = this.horizontal ? (this.content.x - this.content.getParent().width * this.content.getParent().anchorX)\r\n            : (this.content.y - this.content.getParent().height * this.content.getParent().anchorY);\r\n        let itemStartIndex = Math.floor(scroll / ((this.horizontal ? this._itemWidth : this._itemHeight) + this.spacing));\r\n        if (itemStartIndex < 0 && !this.scrollTopNotifyed) {\r\n            this.notifyScrollToTop();\r\n            this.scrollTopNotifyed = true;\r\n            return itemStartIndex;\r\n        }\r\n        // 防止重复触发topNotify.仅当首item不可见后才能再次触发\r\n        if (itemStartIndex > 0) {\r\n            this.scrollTopNotifyed = false;\r\n        }\r\n\r\n        if (this.lastStartIndex != itemStartIndex) {\r\n            this.lastStartIndex = itemStartIndex;\r\n            return itemStartIndex;\r\n        }\r\n\r\n        return -1;\r\n    },\r\n\r\n    // 查找需要补充的元素索引.\r\n    findUpdateIndex(itemStartIndex, itemEndIndex) {\r\n        const d = [];\r\n        for (let i = itemStartIndex; i < itemEndIndex; i++) {\r\n            if (this._filledIds.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            d.push(i);\r\n        }\r\n        return d;\r\n    },\r\n\r\n    notifyScrollToTop() {\r\n        if (!this.adapter || this.adapter.getCount() <= 0) {\r\n            return;\r\n        }\r\n        if (this.pullDownCallback) {\r\n            this.pullDownCallback();\r\n        }\r\n    },\r\n\r\n    notifyScrollToBottom() {\r\n        if (!this.adapter || this.adapter.getCount() <= 0) {\r\n            return;\r\n        }\r\n        if (this.pullUpCallback) {\r\n            this.pullUpCallback();\r\n        }\r\n    },\r\n\r\n    adjustEvent(){\r\n        this.content.on(this.isMobile() ? cc.Node.EventType.TOUCH_END : cc.Node.EventType.MOUSE_UP, () => {\r\n            this.scrollTopNotifyed = false;\r\n            this.scrollBottomNotifyed = false;\r\n        }, this);\r\n        this.content.on(this.isMobile() ? cc.Node.EventType.TOUCH_CANCEL : cc.Node.EventType.MOUSE_LEAVE, () => {\r\n            this.scrollTopNotifyed = false;\r\n            this.scrollBottomNotifyed = false;\r\n        }, this);\r\n    },\r\n\r\n    isMobile() {\r\n        return (cc.sys.isMobile || cc.sys.platform === cc.sys.WECHAT_GAME || cc.sys.platform === cc.sys.QQ_PLAY)\r\n    }\r\n});\r\n\r\nmodule.exports = {\r\n    ListAdapter: ListAdapter,\r\n    ListView: ListView,\r\n};\r\n\r\n"]}