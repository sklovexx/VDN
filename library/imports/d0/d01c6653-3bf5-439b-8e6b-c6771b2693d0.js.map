{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\encrypt/assets\\NiuNiu\\script\\encrypt\\Encrypt.js"],"names":["name","definition","exports","module","define","amd","petal","encryptjs","rl","version","init","console","log","Algo","require","encrypt","plaintext","password","nBits","blockSize","String","utf8Encode","nBytes","pwBytes","Array","i","isNaN","charCodeAt","key","cipher","keyExpansion","concat","slice","counterBlock","nonce","Date","getTime","nonceMs","nonceSec","Math","floor","nonceRnd","random","ctrTxt","fromCharCode","keySchedule","blockCount","ceil","length","ciphertxt","b","c","cipherCntr","blockLength","cipherChar","join","ciphertext","base64Encode","decrypt","base64Decode","nBlocks","ct","plaintxt","plaintxtByte","utf8Decode","_keyStr","input","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","_utf8_encode","charAt","replace","indexOf","_utf8_decode","string","utftext","n","c1","c2","c3","getTextEncryptAndSaveToTextFile","filePath","Error","question","answer","cipherText","close","getTextEncryptAndSaveToJSONFile","writeCipherTextToJSON","EncryptedText","file","obj","options","callback","spaces","str","JSON","stringify","replacer","err","prototype","unescape","encodeURIComponent","decodeURIComponent","escape","e","btoa","Buffer","toString","atob"],"mappings":"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","file":"Encrypt.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\encrypt","sourcesContent":["/*!\n * Copyright (c) 2015 Sri Harsha <sri.harsha@zenq.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\"use strict\";\n\n(function (name, definition) {\n    if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n        module.exports = definition();\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\n        define(definition);\n    } else if (typeof define === 'function' && typeof define.petal === 'object') {\n        define(name, [], definition);\n    } else {\n        this[name] = definition();\n    }\n})('encryptjs', function (encryptjs) {\n    let rl;\n    //Electron doesnt support stdin, so dont setup CLI if its not available.\n\n    encryptjs = { version: '1.0.0' };\n\n    //Right before exporting the validator object, pass each of the builtins\n    //through extend() so that their first argument is coerced to a string\n    encryptjs.init = function () {\n        console.log(\"--------------------Applying Encryption Algorithm------------------ \");\n    };\n\n    let Algo = null;\n    if (typeof module!='undefined' && module.exports) {\n        Algo = require('./Algo'); // CommonJS (Node.js)\n    }\n\n    encryptjs.encrypt = function(plaintext, password, nBits) {\n        let blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4)\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\n        plaintext = String(plaintext).utf8Encode();\n        password = String(password).utf8Encode();\n\n        // use AES itself to encrypt password to get cipher key (using plain password as source for key\n        // expansion) - gives us well encrypted key (though hashed key might be preferred for prod'n use)\n        let nBytes = nBits/8;  // no bytes in key (16/24/32)\n        let pwBytes = new Array(nBytes);\n        for (let i=0; i<nBytes; i++) {  // use 1st 16/24/32 chars of password for key\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n        }\n        let key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes)); // gives us 16-byte key\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\n\n        // initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A �B.2): [0-1] = millisec,\n        // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106\n        let counterBlock = new Array(blockSize);\n\n        let nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970\n        let nonceMs = nonce%1000;\n        let nonceSec = Math.floor(nonce/1000);\n        let nonceRnd = Math.floor(Math.random()*0xffff);\n        // for debugging: nonce = nonceMs = nonceSec = nonceRnd = 0;\n\n        for (let i=0; i<2; i++) counterBlock[i]   = (nonceMs  >>> i*8) & 0xff;\n        for (let i=0; i<2; i++) counterBlock[i+2] = (nonceRnd >>> i*8) & 0xff;\n        for (let i=0; i<4; i++) counterBlock[i+4] = (nonceSec >>> i*8) & 0xff;\n\n        // and convert it to a string to go on the front of the ciphertext\n        let ctrTxt = '';\n        for (let i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\n\n        // generate key schedule - an expansion of the key into distinct Key Rounds for each round\n        let keySchedule = Algo.keyExpansion(key);\n\n        let blockCount = Math.ceil(plaintext.length/blockSize);\n        let ciphertxt = new Array(blockCount);  // ciphertext as array of strings\n\n        for (let b=0; b<blockCount; b++) {\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n            // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\n            for (let c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;\n            for (let c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8);\n\n            let cipherCntr = Algo.cipher(counterBlock, keySchedule);  // -- encrypt counter block --\n\n            // block size is reduced on final block\n            let blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\n            let cipherChar = new Array(blockLength);\n\n            for (let i=0; i<blockLength; i++) {  // -- xor plaintext with ciphered counter char-by-char --\n                cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);\n                cipherChar[i] = String.fromCharCode(cipherChar[i]);\n            }\n            ciphertxt[b] = cipherChar.join('');\n        }\n\n        // use Array.join() for better performance than repeated string appends\n        let ciphertext = ctrTxt + ciphertxt.join('');\n        // ciphertext = ciphertext.base64Encode();\n        ciphertext = encryptjs.base64Encode(ciphertext);\n\n        return ciphertext;\n    };\n\n    encryptjs.decrypt = function(ciphertext, password, nBits) {\n        let blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\n        // ciphertext = String(ciphertext).base64Decode();\n        ciphertext = encryptjs.base64Decode(String(ciphertext));\n        password = String(password).utf8Encode();\n\n        // use AES to encrypt password (mirroring encrypt routine)\n        let nBytes = nBits/8;  // no bytes in key\n        let pwBytes = new Array(nBytes);\n        for (let i=0; i<nBytes; i++) {\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n        }\n        let key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes));\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\n\n        // recover nonce from 1st 8 bytes of ciphertext\n        let counterBlock = new Array(8);\n        let ctrTxt = ciphertext.slice(0, 8);\n        for (let i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\n\n        // generate key schedule\n        let keySchedule = Algo.keyExpansion(key);\n\n        // separate ciphertext into blocks (skipping past initial 8 bytes)\n        let nBlocks = Math.ceil((ciphertext.length-8) / blockSize);\n        let ct = new Array(nBlocks);\n        for (let b=0; b<nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);\n        ciphertext = ct;  // ciphertext is now array of block-length strings\n\n        // plaintext will get generated block-by-block into array of block-length strings\n        let plaintxt = new Array(ciphertext.length);\n\n        for (let b=0; b<nBlocks; b++) {\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n            for (let c=0; c<4; c++) counterBlock[15-c] = ((b) >>> c*8) & 0xff;\n            for (let c=0; c<4; c++) counterBlock[15-c-4] = (((b+1)/0x100000000-1) >>> c*8) & 0xff;\n\n            let cipherCntr = Algo.cipher(counterBlock, keySchedule);  // encrypt counter block\n\n            let plaintxtByte = new Array(ciphertext[b].length);\n            for (let i=0; i<ciphertext[b].length; i++) {\n                // -- xor plaintxt with ciphered counter byte-by-byte --\n                plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\n                plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\n            }\n            plaintxt[b] = plaintxtByte.join('');\n        }\n\n        // join array of blocks into single plaintext string\n        let plaintext = plaintxt.join('');\n        plaintext = plaintext.utf8Decode();  // decode from UTF8 back to Unicode multi-byte chars\n\n        return plaintext;\n    };\n\n    //----------------base64 start---------------\n    let _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    encryptjs.base64Encode = function (input) {\n        let output = \"\";\n        let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        let i = 0;\n        input = encryptjs._utf8_encode(input);\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output +\n                _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\n                _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n        }\n        return output;\n    }\n    encryptjs.base64Decode = function (input) {\n        let output = \"\";\n        let chr1, chr2, chr3;\n        let enc1, enc2, enc3, enc4;\n        let i = 0;\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output = output + String.fromCharCode(chr1);\n            if (enc3 != 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 != 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        }\n        output = encryptjs._utf8_decode(output);\n        return output;\n    }\n\n    // private method for UTF-8 encoding\n    encryptjs._utf8_encode = function (string) {\n        string = string.replace(/\\r\\n/g,\"\\n\");\n        let utftext = \"\";\n        for (let n = 0; n < string.length; n++) {\n            let c = string.charCodeAt(n);\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n\n        }\n        return utftext;\n    }\n\n    // private method for UTF-8 decoding\n    encryptjs._utf8_decode = function (utftext) {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c1 = 0;\n        let c2 = 0;\n        let c3 = 0;\n        while ( i < utftext.length ) {\n            c = utftext.charCodeAt(i);\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i+1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i+1);\n                c3 = utftext.charCodeAt(i+2);\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n        }\n        return string;\n    }\n    //------------------base64 end----------------\n\n    encryptjs.getTextEncryptAndSaveToTextFile = function(filePath,password,nBits) {\n        if (!rl) throw Error(\"Command line not supported on this platform\");\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\n            // TODO: Log the answer in a database\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\n            let cipherText=encryptjs.encrypt(answer,password,nBits);\n            rl.close();\n        });\n    };\n\n    encryptjs.getTextEncryptAndSaveToJSONFile = function(filePath,password,nBits) {\n        if (!rl) throw Error(\"Command line not supported on this platform\");\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\n            // TODO: Log the answer in a database\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\n            let cipherText=encryptjs.encrypt(answer,password,nBits);\n            encryptjs.writeCipherTextToJSON(filePath,{EncryptedText:cipherText},function(){\n                console.log(\"'encryptedText.JSON' File created in your local directory, if not present refresh your project\");\n            });\n            rl.close();\n        });\n    };\n\n    encryptjs.writeCipherTextToJSON=function(file, obj, options, callback) {\n        if (callback == null) {\n            callback = options;\n            options = {}\n        }\n\n        let spaces = typeof options === 'object' && options !== null\n            ? 'spaces' in options\n            ? options.spaces : this.spaces\n            : this.spaces;\n\n        let str = '';\n        try {\n            str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\\n'\n        } catch (err) {\n            if (callback) return callback(err, null)\n        }\n    };\n\n    if (typeof String.prototype.utf8Encode == 'undefined') {\n        String.prototype.utf8Encode = function() {\n            return unescape( encodeURIComponent( this ) );\n        };\n    }\n\n    if (typeof String.prototype.utf8Decode == 'undefined') {\n        String.prototype.utf8Decode = function() {\n            try {\n                return decodeURIComponent( escape( this ) );\n            } catch (e) {\n                return this; // invalid UTF-8? return as-is\n            }\n        };\n    }\n\n    if (typeof String.prototype.base64Encode == 'undefined') {\n        String.prototype.base64Encode = function() {\n            if (typeof btoa != 'undefined') return btoa(this); // browser\n            if (typeof Buffer != 'undefined') return new Buffer(this, 'utf8').toString('base64'); // Node.js\n            throw new Error('No Base64 Encode');\n        };\n    }\n\n    if (typeof String.prototype.base64Decode == 'undefined') {\n        String.prototype.base64Decode = function() {\n            if (typeof atob != 'undefined') return atob(this); // browser\n            if (typeof Buffer != 'undefined') return new Buffer(this, 'base64').toString('utf8'); // Node.js\n            throw new Error('No Base64 Decode');\n        };\n    }\n\n    encryptjs.init();\n\n    return encryptjs;\n\n});\n"]}