{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\net/assets\\NiuNiu\\script\\net\\GameHttp.js"],"names":["DEFAULT_HTTP_TIMEOUT","HttpError","TIMEOUT","ERROR","ABORT","HttpResponse","cc","Class","ctor","xhr_","error_","init","xhr","isOk","readyState","status","getBody","response","setError","error","getError","getHeaders","getHeader","name","registerEventsForXmlHttpRequest_","callback","r","onreadystatechange","evt","ontimeout","onerror","onabort","httpGet","url","opt_timeout","loader","getXMLHttpRequest","timeout","open","send","httpPost","data","setRequestHeader","log","JSON","stringify","module","exports"],"mappings":"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","file":"GameHttp.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\net","sourcesContent":["/**\r\n * 默认的Http超时时间，毫秒\r\n * @const {number}\r\n */\r\nconst DEFAULT_HTTP_TIMEOUT = 10000;\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nlet HttpError = {\r\n    TIMEOUT: 'timeout',\r\n    ERROR: 'error',\r\n    ABORT: 'abort'\r\n};\r\n\r\n/**\r\n * 统一封装Http的响应，方便使用。\r\n * 目前暂时只支持XMLHttpRequest。\r\n * @type {HttpResponse}\r\n */\r\nlet HttpResponse = cc.Class({\r\n\r\n    ctor: function(){\r\n        /**\r\n         * @type {XMLHttpRequest}\r\n         */\r\n        this.xhr_ = null;\r\n        /**\r\n         * 错误信息\r\n         * @type {?HttpError}\r\n         * @private\r\n         */\r\n        this.error_ = null;\r\n    },\r\n\r\n    init: function (xhr) {\r\n        this.xhr_ = xhr;\r\n    },\r\n\r\n    /**\r\n     * 请求是否成功并且正确\r\n     * @returns {boolean}\r\n     */\r\n    isOk: function() {\r\n        var xhr = this.xhr_;\r\n        return xhr.readyState == 4 && (xhr.status >= 200 && xhr.status <= 207);\r\n    },\r\n\r\n    /**\r\n     * Response的数据，\r\n     * @returns {(string|ArrayBuffer|Blob|Object|Document)}\r\n     */\r\n    getBody: function() {\r\n        return this.xhr_.response;\r\n    },\r\n\r\n    /**\r\n     * @param {!HttpError} error\r\n     */\r\n    setError: function(error) {\r\n        this.error_ = error;\r\n    },\r\n\r\n    /**\r\n     * 错误原因，可能为：'timeout', 'error', 'abort'\r\n     * 当isOk()返回false时有效。\r\n     * @returns {?HttpError}\r\n     */\r\n    getError: function() {\r\n        return this.error_;\r\n    },\r\n\r\n    /**\r\n     * 返回所有的Http Response Header\r\n     * @returns {object.<string, Array.<string>>} 每一个key，可能会有多个值\r\n     */\r\n    getHeaders: function () {\r\n        // todo: 需要实现\r\n    },\r\n\r\n    /**\r\n     * 返回指定的Http Response Header\r\n     * @param {string} name Header名字\r\n     * @returns {Array.<string>} 如果不存在，返回[]\r\n     */\r\n    getHeader: function (name) {\r\n        // todo: 需要实现\r\n    }\r\n});\r\n\r\n/**\r\n * 注册XmlHttpRequest的事件\r\n * @param {XMLHttpRequest} xhr\r\n * @param {function} callback\r\n * @private\r\n */\r\nlet registerEventsForXmlHttpRequest_ = function(xhr, callback) {\r\n    var r = new HttpResponse();\r\n    r.init(xhr);\r\n\r\n    xhr.onreadystatechange = function (evt) {\r\n        if (xhr.readyState == 4 ) {\r\n            callback(r);\r\n        }\r\n    };\r\n\r\n    xhr.ontimeout = function(evt) {\r\n        r.setError(HttpError.TIMEOUT);\r\n        callback(r);\r\n    };\r\n\r\n    xhr.onerror = function (evt) {\r\n        r.setError(HttpError.ERROR);\r\n        callback(r);\r\n    };\r\n\r\n    xhr.onabort = function (evt) {\r\n        r.setError(HttpError.ABORT);\r\n        callback(r);\r\n    };\r\n};\r\n\r\n/**\r\n * Http GET请求\r\n * @param {string} url\r\n * @param {function} callback 可选。成功或失败后回调，callback(HttpResponse)\r\n * @param {number} opt_timeout 可选。超时时间，毫秒。\r\n */\r\nlet httpGet = function(url, callback, opt_timeout) {\r\n    var xhr = cc.loader.getXMLHttpRequest();\r\n    xhr.timeout = opt_timeout ? opt_timeout : DEFAULT_HTTP_TIMEOUT;\r\n    if(callback){\r\n        registerEventsForXmlHttpRequest_(xhr, callback);\r\n    }\r\n    xhr.open('GET', url, true);\r\n\r\n    // xhr.setRequestHeader(\"Accept-Encoding\",\"gzip,deflate\");\r\n    // 必须放在open()之后。否则jsb的实现会判断url如果以.json结尾，则设为JSON类型\r\n    //xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.send();\r\n};\r\n\r\n/**\r\n * Http Post请求\r\n * @param url\r\n * @param data{String} 数据\r\n * @param callback\r\n * @param opt_timeout\r\n */\r\nlet httpPost = function (url, data, callback, opt_timeout) {\r\n    let xhr = cc.loader.getXMLHttpRequest();\r\n    xhr.timeout = opt_timeout ? opt_timeout : DEFAULT_HTTP_TIMEOUT;\r\n    if (callback){\r\n        registerEventsForXmlHttpRequest_(xhr, callback);\r\n    }\r\n\r\n    xhr.open('POST', url, true);\r\n    // 默认使用json格式传输数据(否则服务器Express不能正确解析json格式)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    cc.log(\"httpPost: \" + typeof data + \" | \" + JSON.stringify(data));\r\n\r\n    // xhr.setRequestHeader(\"Accept-Encoding\",\"gzip,deflate\");\r\n    // 必须放在open()之后。否则jsb的实现会判断url如果以.json结尾，则设为JSON类型\r\n    //xhr.responseType = 'arraybuffer';\r\n\r\n    xhr.send(data);\r\n};\r\n\r\nmodule.exports = {\r\n    httpGet: httpGet,\r\n    httpPost: httpPost\r\n};"]}