{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\net\\socket/assets\\NiuNiu\\script\\net\\socket\\GameNetwork.js"],"names":["GameWebSocket","require","GameProtocols","response_state","ERROR_OK","NetworkCallback","cc","Class","properties","request","callback","init","GameNetwork","extends","GameWebSocketDelegate","ctor","_socket","_delegate","_requestSequenceId","pushResponseCallback","_networkCallbacks","setDelegate","delegate","registerPushResponseCallback","act","offCallback","isSocketOpened","getState","GameWebSocketState","OPEN","isSocketClosed","connect","url","log","closeConnect","close","onSocketOpen","onNetworkOpen","onSocketError","onSocketClosed","reason","onNetworkClose","onSocketMessage","msg","_onResponse","responseData","responseJson","JSON","parse","responseClass","response_classes","response","loadData","ignoreError","seq","pushCallback","callbackObj","err","is_async","sendRequest","opt_callback","_sendSocketRequest","req","assert","stringify","send","module","exports"],"mappings":"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","file":"GameNetwork.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\NiuNiu\\script\\net\\socket","sourcesContent":["/**\r\n * Created by skyxu on 2018/10/9.\r\n */\r\n\r\n\"use strict\";\r\n\r\nlet GameWebSocket = require(\"./GameWebSocket\");\r\nlet GameProtocols = require(\"./GameProtocols\");\r\n\r\n/**\r\n * 服务器回复消息状态，判断回复消息的各种问题\r\n */\r\nvar response_state = {\r\n    ERROR_OK : '0'\r\n};\r\n\r\n/**\r\n * 请求回调对象，收到服务器回调后的回调方法\r\n */\r\nvar NetworkCallback = cc.Class({\r\n\r\n    properties: {\r\n\r\n        /**\r\n         * @type {BaseRequest} request\r\n         */\r\n        request: null,\r\n\r\n        /**\r\n         * 请求回调对方法\r\n         */\r\n        callback: null\r\n    },\r\n\r\n    /**\r\n     * @param {BaseRequest} request\r\n     * @param {function(BaseResponse): boolean} callback\r\n     */\r\n    init: function (request, callback) {\r\n        this.request = request;\r\n        this.callback = callback;\r\n    }\r\n});\r\n\r\n\r\nlet GameNetwork = cc.Class({\r\n    extends: GameWebSocket.GameWebSocketDelegate,\r\n\r\n    ctor: function() {\r\n        this._socket = null;\r\n\r\n        this._delegate = null;\r\n\r\n        /**\r\n         * 每次发送请求，都需要有一个唯一的编号\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._requestSequenceId = 0;\r\n\r\n        /**\r\n         * 接受服务器主动下发的response回调\r\n         * key 表示BaseResponse.act\r\n         * @type {Object.<string, function(object.<string, *>)>}\r\n         */\r\n        this.pushResponseCallback = {};\r\n\r\n        /**\r\n         * 根据seq保存Request和其callback，以便在收到服务器的响应后回调\r\n         * @type {Object.<int, NetworkCallback>}\r\n         * @private\r\n         */\r\n        this._networkCallbacks = {};\r\n    },\r\n\r\n    setDelegate: function (delegate) {\r\n        this._delegate = delegate;\r\n    },\r\n\r\n    /**\r\n     * 注册服务器主动推送的response 回调\r\n     */\r\n    registerPushResponseCallback : function(act, callback){\r\n        this.pushResponseCallback[act] = callback;\r\n    },\r\n    offCallback : function(act,callback){\r\n        this.pushResponseCallback[act] = null;\r\n    },\r\n    /**\r\n     * 判断socket已连接成功，可以通信\r\n     * @returns {boolean}\r\n     */\r\n    isSocketOpened: function(){\r\n        return (this._socket && this._socket.getState() == GameWebSocket.GameWebSocketState.OPEN);\r\n    },\r\n\r\n    isSocketClosed: function () {\r\n        return this._socket == null;\r\n    },\r\n\r\n    /**\r\n     * 启动连接\r\n     */\r\n    connect: function (url) {\r\n        cc.log(\"webSocketUrls=\" + url);\r\n        this._requestSequenceId = 0;\r\n        this._socket = new GameWebSocket.GameWebSocket();\r\n        this._socket.init(url, this);\r\n        this._socket.connect();\r\n    },\r\n\r\n    closeConnect: function () {\r\n        if(this._socket){\r\n            this._socket.close();\r\n        }\r\n    },\r\n\r\n    onSocketOpen: function () {\r\n        cc.log('Socket:onOpen');\r\n        if(this._delegate && this._delegate.onNetworkOpen){\r\n            this._delegate.onNetworkOpen();\r\n        }\r\n    },\r\n\r\n    onSocketError: function () {\r\n        cc.log('Socket:onError');\r\n    },\r\n\r\n    onSocketClosed: function (reason) {\r\n        cc.log('Socket:onClose', reason);\r\n        if (this._socket) {\r\n            this._socket.close();\r\n        }\r\n        this._socket = null;\r\n\r\n        if(this._delegate && this._delegate.onNetworkClose){\r\n            this._delegate.onNetworkClose();\r\n        }\r\n    },\r\n\r\n    onSocketMessage: function (msg) {\r\n        this._onResponse(msg);\r\n    },\r\n\r\n    _onResponse: function(responseData){\r\n        cc.log('response->resp:', responseData);\r\n        var responseJson = JSON.parse(responseData);\r\n        var responseClass = GameProtocols.response_classes[responseJson.act];\r\n        /**\r\n         * @type {object.<BaseResponse>}\r\n         */\r\n        var response = new responseClass();\r\n        response.loadData(responseJson);\r\n\r\n        // response.act = responseJson.act;\r\n        // response.seq = responseJson.seq;\r\n        // response.err = responseJson.err;\r\n\r\n        // 如果指定了回调函数，先回调\r\n        var ignoreError = false;\r\n        if(response.seq != -1){\r\n            // 处理服务器推送消息\r\n            var pushCallback = this.pushResponseCallback[response.act];\r\n            if(pushCallback){\r\n                pushCallback(response);\r\n            }\r\n\r\n            // request回调\r\n            var callbackObj = this._networkCallbacks[response.seq];\r\n            if(callbackObj){\r\n                ignoreError = callbackObj.callback(response);\r\n                // try {\r\n                //     ignoreError = callbackObj.callback(response);\r\n                // } catch (err) {\r\n                //     cc.log(err + \" error in response callback of \" + response.act);\r\n                // } finally {\r\n                //     delete this._networkCallbacks[response.seq];\r\n                // }\r\n            }\r\n        }\r\n\r\n        //有错，且不忽略，则统一处理错误\r\n        if(response.err && response.err != response_state.ERROR_OK && !ignoreError){\r\n            if (response.is_async) {  // 异步请求，如果出错了，应该需要重新登录\r\n                // todo 重新登录？或者重新同步数据？\r\n            } else {  // 同步请求，如果出错了，需要显示错误信息\r\n                // todo 显示错误\r\n                var msg = responseJson.msg;\r\n                cc.log('server err ' + msg);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 向服务器发送请求。\r\n     *\r\n     * 如果提供了callback，在收到response后会被回调。如果response是一个错误(status!=ERR_OK)，则需要决定由谁来负责处理错误。\r\n     * 如果callback中已经对错误进行了处理，应该返回true，这样会忽略该错误。否则应该返回false，则负责处理该错误。\r\n     *\r\n     * 特别注意：如果这是一个异步(is_async)请求，且出错，一般来讲应该重新登录/同步。但是如果callback返回了true，不会进行\r\n     * 任何处理，也就是不会重新登录/同步。请小心确定返回值。\r\n     *\r\n     * @param {object.<BaseRequest>}\r\n     * @param {function(BaseResponse): boolean=} opt_callback 回调函数。出错的情况下，如果返回true，则不会再次处理错误。\r\n     */\r\n    sendRequest: function (request, opt_callback) {\r\n        // 每个请求的seq应该唯一，且递增\r\n        request.seq = ++this._requestSequenceId;\r\n\r\n        //生成NetworkCallback对象，绑定请求seq和回调方法\r\n        if(opt_callback){\r\n            this._networkCallbacks[request.seq] = new NetworkCallback();\r\n            this._networkCallbacks[request.seq].init(request, opt_callback);\r\n        }\r\n        this._sendSocketRequest(request);\r\n    },\r\n\r\n    /**\r\n     * @param {object.<BaseRequest>} req\r\n     */\r\n    _sendSocketRequest: function (req) {\r\n        cc.assert(this._socket);\r\n        let msg = JSON.stringify(req);\r\n\r\n        if (this.isSocketOpened()){\r\n            //通过json的方法生成请求字符串\r\n            cc.log(\"WebSocketDelegate::send->\" + msg);\r\n            this._socket.send(msg);\r\n        } else{\r\n            // todo\r\n            cc.log(\"socket error, can not send req: \" + msg);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = GameNetwork;"]}